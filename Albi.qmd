---
title: "Albi"
execute:
  echo: false
format:
  html:
    theme: cosmo
    toc: true
    grid:
      margin-width: 150px
    fontcolor: pink
    backgroundcolor: pink
---


![](albi.svg){width=600px}


* **Nombres d'habitants** : 49 094
* **Densité** : 1 109 (*nombre d'habitants au $km^2$*)
* **Département** : Tarn (81) 

```{python}
import pandas as pd
import plotly.express as px

# Charger le fichier CSV dans un DataFrame
df = pd.read_csv('Mesure_annuelle_Region_Occitanie_Polluants_Principaux.csv')

# Filtrer les données pour la ville d'Albi
albi_data = df[df['nom_com'] == 'ALBI'].copy()

# Convertir la colonne 'date_debut' en format datetime
albi_data['date_debut'] = pd.to_datetime(albi_data['date_debut'])

# Trier les données par date
albi_data = albi_data.sort_values(by='date_debut')

# Créer un graphique linéaire avec Plotly Express
fig = px.line(albi_data, x='date_debut', y='valeur', color='nom_poll',
              labels={'valeur': f'Concentration de pollution (ug.m-3)'},
              title='Évolution des concentrations de pollution à Albi par année')

# Ajouter une ligne horizontale à la valeur 120 avec des pointillés
fig.add_shape(
    dict(
        type='line',
        x0=albi_data['date_debut'].min(),
        x1=albi_data['date_debut'].max(),
        y0=120,
        y1=120,
        line=dict(color='red', width=2, dash='dash'),
    )
)

# Mettre à jour la légende avec le taux maximal de O3
fig.update_layout(
    legend_title_text='Taux maximal de O3',
    legend_traceorder='reversed',
    legend=dict(orientation='h', yanchor='bottom', y=1.02, xanchor='left', x=0)
)

# Personnaliser le graphique
fig.update_layout(xaxis=dict(title='Année'), yaxis=dict(title='Concentration de pollution (ug.m-3)'))

# Afficher le graphique interactif
fig.show()

# Créer un treemap avec Plotly Express
fig_treemap = px.treemap(albi_data, 
                         path=['date_debut', 'nom_poll'], 
                         values='valeur',
                         color='valeur',
                         color_continuous_scale='Viridis',
                         title='Répartition des concentrations de pollution à Albi par année et par polluant')

# Personnaliser le graphique treemap
fig_treemap.update_layout(
    treemapcolorway=px.colors.qualitative.Set1,  # Choisir une palette de couleurs
    coloraxis_colorbar=dict(title='Concentration de pollution (ug.m-3)'),
    xaxis=dict(title='Année'),
    yaxis=dict(title='Polluants'),
)

# Afficher le graphique treemap interactif
fig_treemap.show()

```
