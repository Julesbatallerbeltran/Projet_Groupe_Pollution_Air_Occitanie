[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Pollution en Occitanie",
    "section": "",
    "text": "Voici une page web qui nous en apprendra sur le lien entre les conditions météorologiques et la pollution :\n\nDispersion des polluants : Les conditions météorologiques, notamment la vitesse et la direction du vent, jouent un rôle essentiel dans la dispersion des polluants atmosphériques. Par exemple, un vent fort peut disperser la pollution sur une grande surface, tandis que des conditions de vent faible peuvent entraîner l’accumulation de polluants près de leur source, ce qui peut aggraver la qualité de l’air.\nInversion thermique : L’inversion thermique est un phénomène météorologique dans lequel une couche d’air plus chaud reste piégée au-dessus d’une couche d’air plus froid. Cela peut empêcher la montée des polluants, les piégeant près du sol, ce qui peut entraîner une accumulation de pollution de l’air, en particulier dans les zones urbaines.\nPrécipitations : Les précipitations, telles que la pluie et la neige, ont un effet de « nettoyage » de l’air. Elles éliminent les polluants atmosphériques en les entraînant vers le sol. Par conséquent, après une période de précipitations, l’air a tendance à être plus propre.\nTempérature et réactions chimiques : Les réactions chimiques qui se produisent dans l’atmosphère, notamment la formation de smog, sont souvent influencées par la température. Les jours chauds et ensoleillés peuvent favoriser la formation de polluants photochimiques, tels que l’ozone troposphérique.\nFacteurs climatiques : Les phénomènes climatiques à long terme, comme les changements climatiques, peuvent également avoir un impact sur la qualité de l’air. Par exemple, des températures plus élevées peuvent favoriser la formation d’ozone troposphérique, un polluant atmosphérique nocif.\n\nEn résumé, les conditions météorologiques peuvent influencer la dispersion, l’accumulation et la formation de polluants atmosphériques, ce qui a un impact direct sur la qualité de l’air. Il est important de prendre en compte ces facteurs lorsque l’on examine les niveaux de pollution de l’air et que l’on tente de comprendre les variations de la qualité de l’air dans une région donnée ici nous avons pris comme exeple l’Occitanie.\nExemple :\n\n\n\nQuantité de polluant pour la ville d’Alès pour l’année 2020\n\n\nSource :\nAutre Exemple :\n\n\n\nTitre du grapphe"
  },
  {
    "objectID": "Diag_Gantt/diag_gantt.html",
    "href": "Diag_Gantt/diag_gantt.html",
    "title": "Météo",
    "section": "",
    "text": "``` mermaid\ngantt title Exemple de Diagramme de Gantt dateFormat YYYY-MM-DD title Diagramme de Gantt axisFormat %d-%m\nsection Dates importantes\nFin du projet :crit, 2023-12-10, 5d\nPrésentation Orale :crit, 2023-12-15, 8d\n\n\nsection Repository\nCréation de contenu : a3, 2023-10-07, 10d\nAjout d'un Readme : a4, 2023-10-17, 7d\nAjout de index html : a5, 2023-10-24, 10d\n\nsection Pages web\nCréation de la page web : a6, 2023-10-31, 10d\nAjout de la carte : a7, 2023-11-08, 12d\nAjout d'interactivité : a8, 2023-11-18, 22d\nEmbellissement de la page : a9, 2023-11-01, 30d"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Intéractivité",
    "section": "",
    "text": "import pandas as pd\nfrom ipyleaflet import Map, TileLayer, GeoJSON, Marker\nimport ipywidgets as widgets\nfrom IPython.display import display\n\n# Charger le fichier CSV dans un DataFrame\nchemin_fichier_csv = 'Mesure_mensuelle_Region_Occitanie_Polluants_Principaux.csv'\ndf = pd.read_csv(chemin_fichier_csv)\n\n# Créer une colonne 'geometry' avec les coordonnées X et Y sous forme de GeoJSON\ndf['geometry'] = df.apply(lambda row: {\"type\": \"Point\", \"coordinates\": [row['X'], row['Y']]}, axis=1)\n\n# Valeur seuil\nSEUIL_DE_VALEUR_ELEVEE = 23.7  # Définissez votre seuil ici\n\n# Créer une carte avec le service WMTS\ncarte = Map(center=(43.611015, 3.876733), zoom=9)\n\n# Ajouter une couche WMTS à la carte\nwmts_url = \"https://services.arcgisonline.com/arcgis/rest/services/World_Imagery/MapServer/WMTS\"\nwmts_layer = TileLayer(url=wmts_url, name=\"WMTS Layer\")\ncarte.add_layer(wmts_layer)\n\n# Créer une GeoJSON FeatureCollection à partir des données de votre DataFrame\ngeojson_data = {\n    \"type\": \"FeatureCollection\",\n    \"features\": []\n}\n\n# Marqueurs pour les valeurs élevées\nhigh_value_markers = []\n\nfor index, row in df.iterrows():\n    feature = {\n        \"type\": \"Feature\",\n        \"geometry\": row['geometry'],\n        \"properties\": {\"nom_dept\": row['nom_dept'], \"valeur\": row['valeur']}\n    }\n    geojson_data['features'].append(feature)\n\n    # Ajouter un marqueur si la valeur de pollution est élevée\n    if row['valeur'] &gt; SEUIL_DE_VALEUR_ELEVEE:\n        marker = Marker(location=(row['Y'], row['X']), draggable=False, title=f\"Valeur: {row['valeur']}\")\n        high_value_markers.append(marker)\n\n# Créer une couche GeoJSON pour les zones polluées\ngeojson_layer = GeoJSON(data=geojson_data, style={'color': 'red', 'opacity': 0.8, 'weight': 1.5})\ncarte.add_layer(geojson_layer)\n\n# Ajouter les marqueurs à la carte\n# Ajouter les marqueurs à la carte\nfor marker in high_value_markers:\n    carte.add_layer(marker)\n\n\n\n# Afficher la carte \ndisplay(widgets.HBox([carte]))\n\nC:\\Users\\romeo\\anaconda3\\lib\\site-packages\\jupyter_client\\session.py:718: UserWarning:\n\nMessage serialization failed with:\nOut of range float values are not JSON compliant\nSupporting this message is deprecated in jupyter-client 7, please make sure your message is JSON-compliant\n\n\n\n\n\n\nCarte interactive des mesures mensuelles de la région Occitanie des principaux polluants en microgramme par mètre cube"
  },
  {
    "objectID": "carte_interactive.html",
    "href": "carte_interactive.html",
    "title": "Carte intéractive",
    "section": "",
    "text": "#Carte interactive \nfrom ipyleaflet import Map, TileLayer, basemaps\n\n# Remplacez l'URL par le service WMTS que vous souhaitez utiliser\nwmts_url = \"https://services.arcgisonline.com/arcgis/rest/services/World_Imagery/MapServer/WMTS\"\n\n# Créer une carte avec le service WMTS\ncarte = Map(center=(43.611015, 3.876733), zoom=12)\n\n# Ajouter une couche WMTS à la carte\nwmts_layer = TileLayer(url=wmts_url, name=\"WMTS Layer\")\ncarte.add_layer(wmts_layer)\n\n# Afficher la carte\ncarte"
  },
  {
    "objectID": "about2.html",
    "href": "about2.html",
    "title": "Données météos",
    "section": "",
    "text": "import requests\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import datetime, timedelta\nimport random\n\n# Remplacez le nom du jeu de données (dataset-name) et les filtres (facet et refine) par les valeurs appropriées\nurl_api = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=donnees-synop-essentielles-omm&rows=100&facet=nom_reg&refine.nom_reg=Occitanie\"\n\n# Faites la requête API\nresponse = requests.get(url_api)\ndata = response.json()\n\n# Créer un DataFrame à partir des données\ndf = pd.DataFrame([record['fields'] for record in data['records']])\n\n# Ajout d'une colonne temporelle pour la démonstration (à remplacer par votre propre colonne)\ndf['datetime'] = [datetime.now() - timedelta(days=random.randint(1, 365)) for _ in range(len(df))]\n\n# Convertir la colonne 'datetime' en format datetime\ndf['datetime'] = pd.to_datetime(df['datetime'])\n\n# Vérifier la structure des données\nprint(df.head())\n\n# Représentation graphique\nif 'temps_present' in df.columns:\n    plt.figure(figsize=(12, 6))\n    plt.plot(df['datetime'], df['temps_present'], marker='o', linestyle='-')\n    plt.title('Représentation Temporelle du Dataset')\n    plt.xlabel('Date et Heure')\n    plt.ylabel('Temps Présent')\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    plt.show()\nelse:\n    print(\"La colonne 'temps_present' n'est pas présente dans le DataFrame.\")\n\n   tminsolc  rafper code_dep            libgeo    pmer  code_epci       t ww  \\\n0       8.5     4.8       66         Perpignan  102150  200027183  290.95  0   \n1       NaN     7.7       12            Millau  101890  241200567  289.75  0   \n2       8.5     5.1       65             Louey  101720  200069300  295.05  0   \n3       6.9     7.8       31           Blagnac  101840  243100518  293.75  0   \n4       3.7     8.2       09  Lorp-Sentaraille  102240  200067940  295.85  0   \n\n   ht_neige numer_sta  ...  nnuage1 hbas hnuage2  hnuage1 nnuage2 nnuage3  \\\n0       0.0     07747  ...      NaN  NaN     NaN      NaN     NaN     NaN   \n1       0.0     07558  ...      NaN  NaN     NaN      NaN     NaN     NaN   \n2       0.0     07621  ...      NaN  NaN     NaN      NaN     NaN     NaN   \n3       0.0     07630  ...      NaN  NaN     NaN      NaN     NaN     NaN   \n4       0.0     07627  ...      NaN  NaN     NaN      NaN     NaN     NaN   \n\n   ctype4  hnuage3  ctype3                   datetime  \n0     NaN      NaN     NaN 2023-05-17 16:20:37.138018  \n1     NaN      NaN     NaN 2023-01-02 16:20:37.138018  \n2     NaN      NaN     NaN 2023-05-01 16:20:37.138018  \n3     NaN      NaN     NaN 2022-11-28 16:20:37.138018  \n4     NaN      NaN     NaN 2022-12-31 16:20:37.138018  \n\n[5 rows x 59 columns]"
  },
  {
    "objectID": "about.html#code-python-pour-la-carte-interactive",
    "href": "about.html#code-python-pour-la-carte-interactive",
    "title": "Carte interactive des mesures mensuelles de la région Occitanie des principaux polluants en microgramme par mètre cube",
    "section": "",
    "text": "```python import pandas as pd from ipyleaflet import Map, TileLayer, GeoJSON, Marker import ipywidgets as widgets from IPython.display import display"
  },
  {
    "objectID": "about.html#résultats-du-calcul-de-la-moyenne-de-pollution-de-lécart-type-ainsi-que-le-seuil",
    "href": "about.html#résultats-du-calcul-de-la-moyenne-de-pollution-de-lécart-type-ainsi-que-le-seuil",
    "title": "Carte intéractive",
    "section": "Résultats du calcul de la moyenne de pollution, de l’écart type ainsi que le seuil",
    "text": "Résultats du calcul de la moyenne de pollution, de l’écart type ainsi que le seuil\n\n#pour calculer la valeur seuil \n# Calculer la moyenne et l'écart type des valeurs de pollution\nmoyenne_pollution = df['valeur'].mean()\necart_type_pollution = df['valeur'].std()\n\n# Définir le seuil comme la moyenne plus 2 fois l'écart type\nseuil_valeur_elevee = moyenne_pollution + 2 * ecart_type_pollution\n\nprint(\"Moyenne de la pollution:\", moyenne_pollution)\nprint(\"Écart type de la pollution:\", ecart_type_pollution)\nprint(\"Seuil de valeur élevée:\", seuil_valeur_elevee)\n\nMoyenne de la pollution: 23.731417458945568\nÉcart type de la pollution: 25.289153037830907\nSeuil de valeur élevée: 74.30972353460739"
  },
  {
    "objectID": "about.html#résultats-moyenne-écart-typé-valeur-max",
    "href": "about.html#résultats-moyenne-écart-typé-valeur-max",
    "title": "Intéractivité",
    "section": "Résultats moyenne, écart typé, valeur max",
    "text": "Résultats moyenne, écart typé, valeur max\n\n#pour calculer la valeur seuil \n# Calculer la moyenne et l'écart type des valeurs de pollution\nmoyenne_pollution = df['valeur'].mean()\necart_type_pollution = df['valeur'].std()\n\n# Définir le seuil comme la moyenne plus 2 fois l'écart type\nseuil_valeur_elevee = moyenne_pollution + 2 * ecart_type_pollution\n\nprint(\"Moyenne de la pollution:\", moyenne_pollution)\nprint(\"Écart type de la pollution:\", ecart_type_pollution)\nprint(\"Seuil de valeur élevée:\", seuil_valeur_elevee)\n\nMoyenne de la pollution: 23.731417458945568\nÉcart type de la pollution: 25.289153037830907\nSeuil de valeur élevée: 74.30972353460739"
  },
  {
    "objectID": "about.html#valeursde-pollution-polluants",
    "href": "about.html#valeursde-pollution-polluants",
    "title": "Intéractivité",
    "section": "",
    "text": "import pandas as pd\nfrom ipyleaflet import Map, TileLayer, GeoJSON, Marker\nimport ipywidgets as widgets\nfrom IPython.display import display\n\n# Charger le fichier CSV dans un DataFrame\nchemin_fichier_csv = 'Mesure_mensuelle_Region_Occitanie_Polluants_Principaux.csv'\ndf = pd.read_csv(chemin_fichier_csv)\n\n# Créer une colonne 'geometry' avec les coordonnées X et Y sous forme de GeoJSON\ndf['geometry'] = df.apply(lambda row: {\"type\": \"Point\", \"coordinates\": [row['X'], row['Y']]}, axis=1)\n\n# Valeur seuil\nSEUIL_DE_VALEUR_ELEVEE = 23.7  # Définissez votre seuil ici\n\n# Créer une carte avec le service WMTS\ncarte = Map(center=(43.611015, 3.876733), zoom=9)\n\n# Ajouter une couche WMTS à la carte\nwmts_url = \"https://services.arcgisonline.com/arcgis/rest/services/World_Imagery/MapServer/WMTS\"\nwmts_layer = TileLayer(url=wmts_url, name=\"WMTS Layer\")\ncarte.add_layer(wmts_layer)\n\n# Créer une GeoJSON FeatureCollection à partir des données de votre DataFrame\ngeojson_data = {\n    \"type\": \"FeatureCollection\",\n    \"features\": []\n}\n\n# Marqueurs pour les valeurs élevées\nhigh_value_markers = []\n\nfor index, row in df.iterrows():\n    feature = {\n        \"type\": \"Feature\",\n        \"geometry\": row['geometry'],\n        \"properties\": {\"nom_dept\": row['nom_dept'], \"valeur\": row['valeur']}\n    }\n    geojson_data['features'].append(feature)\n\n    # Ajouter un marqueur si la valeur de pollution est élevée\n    if row['valeur'] &gt; SEUIL_DE_VALEUR_ELEVEE:\n        marker = Marker(location=(row['Y'], row['X']), draggable=False, title=f\"Valeur: {row['valeur']}\")\n        high_value_markers.append(marker)\n\n# Créer une couche GeoJSON pour les zones polluées\ngeojson_layer = GeoJSON(data=geojson_data, style={'color': 'red', 'opacity': 0.8, 'weight': 1.5})\ncarte.add_layer(geojson_layer)\n\n# Ajouter les marqueurs à la carte\n# Ajouter les marqueurs à la carte\nfor marker in high_value_markers:\n    carte.add_layer(marker)\n\n\n\n# Afficher la carte \ndisplay(widgets.HBox([carte]))\n\nC:\\Users\\romeo\\anaconda3\\lib\\site-packages\\jupyter_client\\session.py:718: UserWarning:\n\nMessage serialization failed with:\nOut of range float values are not JSON compliant\nSupporting this message is deprecated in jupyter-client 7, please make sure your message is JSON-compliant\n\n\n\n\n\n\nCarte interactive des mesures mensuelles de la région Occitanie des principaux polluants en microgramme par mètre cube"
  },
  {
    "objectID": "about.html#valeurs-de-pollution-polluants",
    "href": "about.html#valeurs-de-pollution-polluants",
    "title": "Intéractivité",
    "section": "",
    "text": "import pandas as pd\nfrom ipyleaflet import Map, TileLayer, GeoJSON, Marker\nimport ipywidgets as widgets\nfrom IPython.display import display\n\n# Charger le fichier CSV dans un DataFrame\nchemin_fichier_csv = 'Mesure_mensuelle_Region_Occitanie_Polluants_Principaux.csv'\ndf = pd.read_csv(chemin_fichier_csv)\n\n# Créer une colonne 'geometry' avec les coordonnées X et Y sous forme de GeoJSON\ndf['geometry'] = df.apply(lambda row: {\"type\": \"Point\", \"coordinates\": [row['X'], row['Y']]}, axis=1)\n\n# Valeur seuil\nSEUIL_DE_VALEUR_ELEVEE = 23.7  # Définissez votre seuil ici\n\n# Créer une carte avec le service WMTS\ncarte = Map(center=(43.611015, 3.876733), zoom=9)\n\n# Ajouter une couche WMTS à la carte\nwmts_url = \"https://services.arcgisonline.com/arcgis/rest/services/World_Imagery/MapServer/WMTS\"\nwmts_layer = TileLayer(url=wmts_url, name=\"WMTS Layer\")\ncarte.add_layer(wmts_layer)\n\n# Créer une GeoJSON FeatureCollection à partir des données de votre DataFrame\ngeojson_data = {\n    \"type\": \"FeatureCollection\",\n    \"features\": []\n}\n\n# Marqueurs pour les valeurs élevées\nhigh_value_markers = []\n\nfor index, row in df.iterrows():\n    feature = {\n        \"type\": \"Feature\",\n        \"geometry\": row['geometry'],\n        \"properties\": {\"nom_dept\": row['nom_dept'], \"valeur\": row['valeur']}\n    }\n    geojson_data['features'].append(feature)\n\n    # Ajouter un marqueur si la valeur de pollution est élevée\n    if row['valeur'] &gt; SEUIL_DE_VALEUR_ELEVEE:\n        marker = Marker(location=(row['Y'], row['X']), draggable=False, title=f\"Valeur: {row['valeur']}\")\n        high_value_markers.append(marker)\n\n# Créer une couche GeoJSON pour les zones polluées\ngeojson_layer = GeoJSON(data=geojson_data, style={'color': 'red', 'opacity': 0.8, 'weight': 1.5})\ncarte.add_layer(geojson_layer)\n\n# Ajouter les marqueurs à la carte\n# Ajouter les marqueurs à la carte\nfor marker in high_value_markers:\n    carte.add_layer(marker)\n\n\n\n# Afficher la carte \ndisplay(widgets.HBox([carte]))\n\nC:\\Users\\romeo\\anaconda3\\lib\\site-packages\\jupyter_client\\session.py:718: UserWarning:\n\nMessage serialization failed with:\nOut of range float values are not JSON compliant\nSupporting this message is deprecated in jupyter-client 7, please make sure your message is JSON-compliant\n\n\n\n\n\n\nCarte interactive des mesures mensuelles de la région Occitanie des principaux polluants en microgramme par mètre cube"
  },
  {
    "objectID": "diapositives/diap.html#getting-up",
    "href": "diapositives/diap.html#getting-up",
    "title": "Projets Pollution",
    "section": "Getting up",
    "text": "Getting up\n\nTurn off alarm\nGet out of bed"
  },
  {
    "objectID": "diapositives/diap.html#breakfast",
    "href": "diapositives/diap.html#breakfast",
    "title": "Projets Pollution",
    "section": "Breakfast",
    "text": "Breakfast\n\nEat eggs\nDrink coffee"
  },
  {
    "objectID": "diapositives/diap.html#dinner",
    "href": "diapositives/diap.html#dinner",
    "title": "Projets Pollution",
    "section": "Dinner",
    "text": "Dinner\n\nEat spaghetti\nDrink wine"
  },
  {
    "objectID": "diapositives/diap.html#going-to-sleep",
    "href": "diapositives/diap.html#going-to-sleep",
    "title": "Projets Pollution",
    "section": "Going to sleep",
    "text": "Going to sleep\n\nGet in bed\nCount sheep"
  },
  {
    "objectID": "diapositives/diap.html#objets-détudes-et-source",
    "href": "diapositives/diap.html#objets-détudes-et-source",
    "title": "Projets Pollution",
    "section": "Objets d’études et source",
    "text": "Objets d’études et source\n\n\nSources :"
  },
  {
    "objectID": "diapositives/diap.html#code",
    "href": "diapositives/diap.html#code",
    "title": "Projets Pollution",
    "section": "Code",
    "text": "Code\n\nEat eggs\nDrink coffee"
  },
  {
    "objectID": "diapositives/diap.html#compréhension-du-phénomène",
    "href": "diapositives/diap.html#compréhension-du-phénomène",
    "title": "Projets Pollution",
    "section": "Compréhension du phénomène :",
    "text": "Compréhension du phénomène :\n\n\nListe (non exhaustive) des risques associés"
  },
  {
    "objectID": "diapositives/diap.html#technicité-et-source",
    "href": "diapositives/diap.html#technicité-et-source",
    "title": "Projets Pollution",
    "section": "Technicité et source",
    "text": "Technicité et source\n\nLangage utilisé (python)\nDiapositives en quarto\nSources"
  },
  {
    "objectID": "diapositives/diap.html#comment-est-ce-quon-a-fait",
    "href": "diapositives/diap.html#comment-est-ce-quon-a-fait",
    "title": "Projets Pollution",
    "section": "Comment est ce qu’on a fait ?",
    "text": "Comment est ce qu’on a fait ?\n-Pandas -Image d’un data frame -tri"
  }
]